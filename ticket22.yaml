AWSTemplateFormatVersion: "2010-09-09"
Description: Template to deploy Procore Website with a new Application Load Balancer, Auto Scaling Group, and IAM Role for S3 access.
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the resources will be created
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet IDs where the instances will be launched
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

Resources:
  # Security Group for EC2 instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access to EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from the internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # IAM Role for EC2 instances (Full access to S3 bucket)
  S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3FullAccessRoleForProcoreWebsite
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3FullAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - "arn:aws:s3:::mys3bucket-for-cloudformation"
                  - "arn:aws:s3:::mys3bucket-for-cloudformation/*"

  # Instance Profile for EC2 instances
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3FullAccessRole

  # Launch Template for EC2 instances (Enable public IPs)
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-0e54eba7c51c234f6
        KeyName: !Ref KeyPair
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Select [ 0, !Ref PublicSubnets ]
            Groups:
              - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y httpd aws-cli
            mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf.bak
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo aws s3 cp s3://mys3bucket-for-cloudformation/procore-website-master/ /var/www/html/ --recursive
            sudo mv /var/www/html/procore-website-master/* /var/www/html/
            sudo rm -rf /var/www/html/procore-website-master
            sudo chown -R apache:apache /var/www/html/
            sudo chmod -R 755 /var/www/html/
            sudo systemctl restart httpd
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "Procore Website Instance"

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      HealthCheckType: EC2
      TargetGroupARNs:
        - !Ref TargetGroup

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "ProcoreTG"
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckPath: /

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "ProcoreLB"
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # Listener for Load Balancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the LoadBalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNSName
